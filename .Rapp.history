as.environment(2)
as.environment(1)
as.environment(0)
as.environment(4)
            .getRequiredPackages2(pkgInfo, quietly = quietly)
quietly = FALSE
.getRequiredPackages2(pkgInfo, quietly = quietly)
pkgInfo
names(pkgInfo$Depends)
            deps <- unique(names(pkgInfo$Depends))
dir.exists <- function(x) !is.na(isdir <- file.info(x)$isdir) & #
                isdir
dir.exists
package != "datasets"
dir.exists(file.path(pkgpath, #
                "R"))
pkgInfo$DESCRIPTION["KeepSource"]
packageHasNamespace(package, which.lib.loc)
.ArgsEnv
.GenericArgsEnv
checkS3methods()
.getRequiredPackages2
pkgInfo
quietly
lib.loc
lib.loc = NULL
useImports = FALSE
names(pkgInfo$Depends)
    pkgs <- unique(names(pkgInfo$Depends))
length(pkgs)
pkgInfo$DESCRIPTION["Package"]
        pkgname <- pkgInfo$DESCRIPTION["Package"]
pkg <- pkgs[1]
pkg == "base"
?next
pkgInfo$Depends[names(pkgInfo$Depends) == pkg]
            zs <- pkgInfo$Depends[names(pkgInfo$Depends) == pkg]
any(vapply(zs, length, 1L) > 1L)
vapply(zs, length, 1L)
            have_vers <- any(vapply(zs, length, 1L) > 1L)
paste("package", pkg, sep = ":")
search()
?library
pkg <- "openintro"
pkgInfo$DESCRIPTION["Package"]
        pkgname <- pkgInfo$DESCRIPTION["Package"]
pkgInfo$Depends[names(pkgInfo$Depends) == pkg]
pkg <- pkgs[1]
            zs <- pkgInfo$Depends[names(pkgInfo$Depends) == pkg]
            have_vers <- any(vapply(zs, length, 1L) > 1L)
?search
?detach
detach("package:MASS")
search()
!paste("package", pkg, sep = ":") %in% search()
have_vers
system.file("Meta", "package.rds", #
                    package = pkg, lib.loc = lib.loc)
                  pfile <- system.file("Meta", "package.rds", #
                    package = pkg, lib.loc = lib.loc)
nzchar(pfile)
readRDS(pfile)$DESCRIPTION["Version"]
                  current <- readRDS(pfile)$DESCRIPTION["Version"]
zs
for(z in zs){ cat(z) }
for(z in zs){  }
z
length(z) > 1L
!quietly
gettextf("Loading required package: %s", #
                    pkg)
packageStartupMessage(gettextf("Loading required package: %s", #
                    pkg), domain = NA)
?getOption
temp <- install.packages()
temp <- installed.packages()
temp[1:3,]
dim(temp)
temp$license
temp[ ,"license"]
names(temp)
temp[1:2,]
temp[ ,"License"]
as.character(temp[ ,"License"])
barplot(as.character(temp[ ,"License"]))
table(as.character(temp[ ,"License"]))
plot(table(as.character(temp[ ,"License"])))
plot()
Temp
Temp <- table(as.character(temp[ ,"License"]))
plot(Temp[Temp > 5])
plot(Temp[Temp > 10])
plot(Temp[Temp > 25])
plot(Temp[Temp > 25], type="l")
plot(Temp[Temp > 25], type="s")
?plot
plot(Temp[Temp > 25], type="h")
plot(Temp[Temp > 100], type="h")
Temp[Temp > 100]
plot(Temp[Temp > 500], type="h")
plot(Temp[Temp > 300], type="h")
Temp[Temp > 100]
sort(Temp[Temp > 50])
rev(sort(Temp[Temp > 50]))
rev(sort(Temp[Temp > 25]))
rev(sort(Temp[Temp > 5]))
library(stockPortfolio)
#
library(stockPortfolio)#
ti <- c("AAPL", "XOM")#
gr <- getReturns(ti, start="2002-01-01")
plot(gr)
ti <- c("XOM", "WLMT")#
gr <- getReturns(ti, start="2002-01-01")#
plot(gr)
ti <- c("XOM", "WLT")#
gr <- getReturns(ti, start="2002-01-01")#
plot(gr)
ti <- c("XOM", "BP")#
gr <- getReturns(ti, start="2002-01-01")#
plot(gr)
#
library(stockPortfolio)#
ti <- c("XOM", "BP")#
gr <- getReturns(ti, start="2002-01-01")#
plot(gr)
ti <- c("AAPL", "MSFT")#
gr <- getReturns(ti, freq="day", start="2008-01-01")#
plot(gr)
stocks <- gr$R
save(stocks, file="stocks.rda")
AirPassengers
plot(AirPassengers)
library(openintro)
marioKart
install.packages("stockPortfolio")
list()
x <- list()
class(x)
class(x) <- "newClass"
class(x)
  print.goat <- function (x, ...){#
      cat("Number of legs:", x$legs, "\n")#
      cat("Number of tails:", x$tails, "\n")#
      y <- ifelse(x$beard, "This goat has a beard", "")#
      cat(y, "\n\n")#
  }#
  x
x
x <- list(beard=TRUE, legs=4, tails=1)
class(x) <- "goat"
x
Method
Class
print.default
?append
append(1:5, 0:1, after=3)
?append
x <- 1:10^5
length9x)
length(x)
#
x <- 1:10^5#
length(x)#
values <- rnorm(5000)#
#
system.time(y1 <- c(x, values))#
#
system.time(y2 <- append(x, values))#
#
identical(y1, y2)
#
x <- 1:10^6#
length(x)#
values <- rnorm(10^5)#
#
system.time(y1 <- c(x, values))#
#
system.time(y2 <- append(x, values))#
#
identical(y1, y2)
#
x      <- 1:10^6#
values <- rnorm(10^5)#
length(x)#
#
system.time(y1 <- c(x, values))#
#
system.time(y2 <- append(x, values))#
#
identical(y1, y2)#
#
#
x <- 1:10#
append(x, pi)#
#
append(x, pi, after=5)
55*1.812
55*18.12
56*18.12
?message
message("ABC", "DEF")#
suppressMessages(message("ABC"))
testit <- function() {#
  message("testing package startup messages")#
  packageStartupMessage("initializing ...", appendLF = FALSE)#
  Sys.sleep(1)#
  packageStartupMessage(" done")#
}#
#
testit()#
suppressPackageStartupMessages(testit())#
suppressMessages(testit())
?message
?isTRUE
xor(c(TRUE, TRUE))
xor(c(TRUE, TRUE), 1)
xor(c(TRUE, TRUE), 0)
xor(c(TRUE, TRUE), c(0, 1))
xor(c(TRUE, TRUE), c(TRUE, FALSE))
xor(TRUE, TRUE)#
#
xor(TRUE, FALSE)#
#
xor(c(TRUE, TRUE, TRUE), c(TRUE, FALSE, FALSE))
#
xor(c(TRUE, TRUE, FALSE, FALSE),#
    c(TRUE, FALSE, TRUE, FALSE))
isTRUE(1)
xor(TRUE, TRUE)#
#
xor(TRUE, FALSE)#
#
xor(c(TRUE, TRUE, FALSE, FALSE),#
    c(TRUE, FALSE, TRUE, FALSE))#
#
isTRUE(1)#
#
isTRUE(TRUE)#
#
isTRUE(FALSE)
#
xor(TRUE, TRUE)#
#
xor(TRUE, FALSE)#
#
xor(c(TRUE, TRUE, FALSE, FALSE),#
    c(TRUE, FALSE, TRUE, FALSE))#
#
#
isTRUE(1)#
#
isTRUE(TRUE)#
#
isTRUE(FALSE)
isTRUE(rep(TRUE, 5))
xor(1, 0)
isTRUE(list())
isTRUE(list(TRUE))
#
xor(TRUE, TRUE)#
#
xor(1, 0)#
#
xor(c(TRUE, TRUE, FALSE, FALSE),#
    c(TRUE, FALSE, TRUE, FALSE))#
#
#
isTRUE(1)#
#
isTRUE(TRUE)#
#
isTRUE(FALSE)#
#
isTRUE(list(TRUE))
isTRUE("TRUE")
x <- function(x) { x }
package.skeleton(path="Desktop")
library(openintro)
?treeDiag
library(openintro)
?treeDiag
?classData
classData[1:5,]
dim(classData)
boxplot(classData$m1 ~ classData$lecture)
anova(lm(m1 ~ lecture, classData))
library(openintro); spam[c(1,2, nrow(spam)),]
library(openintro, xtable)
xtable(spam[c(1,2, nrow(spam)),])
library(xtable); xtable(spam[c(1,2, nrow(spam)),])
c(1,2, nrow(spam))
library(openintro); library(xtable); xtable(spam[c(1,2, nrow(spam)),])
nrow(spam)
spam[c(1,2, nrow(spam)),]
xtable(spam)
xtable(spam[c(1,2, nrow(spam)),-5])
names(spam)
xtable(spam[c(1,2, nrow(spam)),-6])
spam[1:2,]
xtable(spam[c(1,2, nrow(spam)),c("spam", "from", "attach", "inherit", "num_char", "html", "big_number")])
xtable(spam[c(1,2, nrow(spam)),c("spam", "from", "attach", "inherit", "num_char", "html", "big_number")], round=0)
?xtable
xtable(spam[c(1,2, nrow(spam)),c("spam", "from", "attach", "inherit", "num_char", "html", "big_number")], digits=0)
library(openintro); library(xtable); xtable(spam[c(1,2, nrow(spam)),c("spam", "from", "attach", "inherit", "num_char", "html", "big_number")], digits=0)
names(spam)
table(spam[,c(1,20)])
fisher.test(table(spam[,c(1,20)]))
table(spam[,c(1,20)])
library(openintro); library(xtable); xtable(spam[c(1,2, nrow(spam)),c("spam", "from", "attach", "inherit", "num_char", "html", "big_number")], digits=0)
nrow(spam)
spam$inherit
table(spam$big_number)
?county
?state
?states
library(maps)#
require(mapproj)#
load("county_processed.RData")#
p10 <- county$pop2010#
p00 <- county$pop2000#
these  <- county$density < 10^4#
values <- county$density#
values[!these] <- max(county$density[these])#
FIPS   <- county$FIPS#
col    <- "green"
library(openintro)
county[1:2,]
dim(county)
library(xtable)
xtable(county[1:4,])
county[1:2,]
library(openintro); library(xtable); xtable(county[c(1,2, nrow(county)),c("names", "state", "pop2010", "fed_spend", "income", "age\_18", "pph", "poverty")], digits=0)
library(openintro); library(xtable); xtable(county[c(1,2, nrow(county)),c("names", "state", "pop2010", "fed_spend", "income", "age_18", "pph", "poverty")], digits=0)
xtable(county[c(1,2, nrow(county)),c("names", "state", "pop2010", "fed_spend", "income", "age\_18", "pph", "poverty")], digits=1)
xtable(county[c(1,2, nrow(county)),c("names", "state", "pop2010", "fed_spend", "income", "age_18", "pph", "poverty")], digits=1)
names(county)
names(county)[1] <- "name"
county[1:2,]
save(county, file="county.rda")
county[3143,]
library(help=openintro)
prRace08
plot(county$fed_spend, county$income)
plot(county$fed_spend, county$income, xlim=c(0,50))
plot(county$fed_spend, county$income, xlim=c(0,50), log="x")
plot(county$fed_spend, county$income, log="x")
cc <- countyComprehensive
cc <- comprehensiveCounty
library(help=openintro)
cc <- countyComplete
cc[1:2,]
plot(cc$black, cc$poverty)
plot(cc$black, cc$poverty, log="x")
plot(cc$black, cc$poverty)
plot(cc$black, cc$poverty, pch=20, cex=0.5)
plot(cc$black, cc$poverty, pch=20, cex=0.5, col="#00000088")
plot(cc$black, cc$poverty, pch=20, cex=0.7, col="#00000088")
plot(cc$black, cc$poverty, pch=20, cex=0.7, col="#00000044")
points(cc$black, cc$poverty, pch=".")
plot(cc$black, cc$poverty, pch=".")
points(cc$black, cc$poverty, pch=".")
points(cc$black, cc$poverty, pch=20, cex=0.7, col="#00000044")
plot(cc$black, cc$fed_spending, pch=20, cex=0.7, col="#00000044")
plot(cc$black, cc$fed_spending/cc$pop2010, pch=20, cex=0.7, col="#00000044")
plot(cc$black, cc$fed_spending/cc$pop2010, pch=20, cex=0.7, col="#00000044", ylim=c(0,30))
plot(cc$poverty, cc$fed_spending/cc$pop2010, pch=20, cex=0.7, col="#00000044", ylim=c(0,30))
plot(cc$poverty, cc$fed_spending/cc$pop2010, pch=20, cex=0.7, col="#00000044", ylim=c(0,30))
plot(cc$poverty, cc$fed_spending/cc$pop2010, pch=20, cex=0.7, col="#00000044", ylim=c(0,50))
plot(county$poverty, county$fed_spend, pch=20, cex=0.7, col="#00000044", ylim=c(0,50))
sum(county$fed_spend > 51)
sum(county$fed_spend > 51, na.rm=TRUE)
plot(county$poverty, county$fed_spend, pch=20, cex=0.7, col="#00000044", ylim=c(0,40))
plot(county$poverty, county$fed_spend, pch=20, cex=0.7, col="#00000044", ylim=c(0,40))
